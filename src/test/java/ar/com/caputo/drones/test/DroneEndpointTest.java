package ar.com.caputo.drones.test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.TestInstance.Lifecycle;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import ar.com.caputo.drones.DroneService;
import ar.com.caputo.drones.database.model.Drone;

@TestInstance(Lifecycle.PER_CLASS)
@TestMethodOrder(OrderAnnotation.class)
public class DroneEndpointTest {

    private static String ENDPOINT_URL;
    private final String TEST_DRONE_SERIAL = UUID.randomUUID().toString(); 
    private final Map<String, Object> TEST_PAYLOAD = Map.of(
        "serialNumber", TEST_DRONE_SERIAL,
        "model", Drone.Model.CRUISERWEIGHT.name(),
        "state", Drone.State.LOADED.name(),
        "weightLimit", 360,
        "batteryLevel", 89
    );

    /**
     * Setups a test instance for the service under
     * {@code 0.0.0.0:9090} with a temporary database
     * {@code dronesTest}
     */
    @BeforeAll
    public static void setup() {
        DroneService.main(new String[]{"-h:0.0.0.0", "-p:9090", "-db:dronesTest"});
        ENDPOINT_URL = "http://localhost:9090" + DroneService.getInstance().API_URL;
    }

    /**
     * Deletes the temporary files generated by
     * {@link DroneEndpointTest#setup()}
     * @throws Exception
     */
    @AfterAll
    public static void teardown() throws Exception {
        Files.deleteIfExists(Path.of(System.getProperty("user.dir") + "/dronesTest.mv.db"));
        Files.deleteIfExists(Path.of(System.getProperty("user.dir") + "/dronesTest.trace.db"));
    }

    @Test
    @DisplayName("GET:/drones should return an empty list")
    @Order(1)
    public void GETdrones_Should_Return_An_Empty_List() throws Exception {

        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");

        assertEquals(200, con.getResponseCode(), "Invalid response code");
        assertTrue(con.getContentType().equalsIgnoreCase("application/json"), "Content is not JSON-encoded");
        
        InputStream in = con.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        String line;
        StringBuilder responseBuilder = new StringBuilder();
        while((line = reader.readLine()) != null) {
            responseBuilder.append(line);
        }

        JsonArray response = DroneService.GSON.fromJson(responseBuilder.toString(), JsonArray.class);
        assertTrue(response.isEmpty(), "Response was not empty, maybe there are preloaded drones?");

    }

    @Test
    @DisplayName("POST:/drones should fail registering a drone incomplete payload")
    @Order(2)
    public void POSTdrones_Should_Fail_Registering_A_Drone_With_Incomplete_Payload() throws Exception {
        
        
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");

        Map<String, Object> payload = new HashMap<>();

        payload.put("serialNumber", TEST_DRONE_SERIAL);

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(400, con.getResponseCode(), "Invalid response code");

    }

    @Test
    @DisplayName("POST:/drones should fail registering a drone with invalid model")
    @Order(3)
    public void POSTdrones_Should_Fail_Registering_A_Drone_With_Invalid_Model() throws Exception {
        
        
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");

        Map<String, Object> payload = new HashMap<>(TEST_PAYLOAD);
        payload.put("model", "INVALID_MODEL_NAME_TEST");

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(400, con.getResponseCode(), "Invalid response code");

    }

    @Test
    @DisplayName("POST:/drones should fail registering a drone with invalid state")
    @Order(4)
    public void POSTdrones_Should_Fail_Registering_A_Drone_With_Invalid_State() throws Exception {
        
        
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");

        Map<String, Object> payload = new HashMap<>(TEST_PAYLOAD);
        payload.put("state", "INVALID_STATE_TEST");

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(400, con.getResponseCode(), "Invalid response code");

    }

    @Test
    @DisplayName("POST:/drones should fail registering a drone with invalid weight limit (under 0)")
    @Order(5)
    public void POSTdrones_Should_Fail_Registering_A_Drone_With_Invalid_Weight_Limit_Under_0() throws Exception {
  
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");

        Map<String, Object> payload = new HashMap<>(TEST_PAYLOAD);
        payload.put("weightLimit", -20);

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(400, con.getResponseCode(), "Invalid response code");

    }

    @Test
    @DisplayName("POST:/drones should fail registering a drone with invalid weight limit (over 500)")
    @Order(6)
    public void POSTdrones_Should_Fail_Registering_A_Drone_With_Invalid_Weight_Limit_Over_500() throws Exception {
        
        
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");


        Map<String, Object> payload = new HashMap<>(TEST_PAYLOAD);
        payload.put("weightLimit", 670);

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(400, con.getResponseCode(), "Invalid response code");

    }

    @Test
    @DisplayName("POST:/drones should fail registering a drone with invalid battery level (under 0)")
    @Order(7)
    public void POSTdrones_Should_Fail_Registering_A_Drone_With_Invalid_Battery_Level_Under_0() throws Exception {
        
        
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");

        Map<String, Object> payload = new HashMap<>(TEST_PAYLOAD);
        payload.put("batteryLevel", -15);

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(400, con.getResponseCode(), "Invalid response code");

    }


    @Test
    @DisplayName("POST:/drones should fail registering a drone with invalid battery level (over 100)")
    @Order(8)
    public void POSTdrones_Should_Fail_Registering_A_Drone_With_Invalid_Battery_Level_Over_100() throws Exception {
        
        
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");

        Map<String, Object> payload = new HashMap<>(TEST_PAYLOAD);
        payload.put("batteryLevel", 150);

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(400, con.getResponseCode(), "Invalid response code");

    }

    @Test
    @DisplayName("POST:/drones should register a new drone")
    @Order(9)
    public void POSTdrones_Should_Register_A_New_Drone() throws Exception {
        
        
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(TEST_PAYLOAD).getBytes());
        out.flush();
        out.close();

        assertEquals(201, con.getResponseCode(), "Invalid response code");

    }

    @Test
    @DisplayName("POST:/drones should fail to register a drone with an already existing serial")
    @Order(10)
    public void POSTdrones_Should_Fail_Registering_A_Drone_With_An_Already_Existing_Serial() throws Exception {
        
        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "application/json");

        Map<String, Object> payload = new HashMap<>();

        payload.put("serialNumber", TEST_DRONE_SERIAL);
        payload.put("model", Drone.Model.LIGHTWEIGHT.name());
        payload.put("state", Drone.State.IDLE.name());
        payload.put("weightLimit", 244);
        payload.put("batteryLevel", 76);

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(400, con.getResponseCode(), "Invalid response code");

    }

    @Test
    @DisplayName("GET:/drones should return a non-empty list")
    @Order(11)
    public void GETdrones_Should_Return_A_Non_Empty_List() throws Exception {

        URL url = new URL(ENDPOINT_URL + "/drones");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");

        assertEquals(200, con.getResponseCode(), "Invalid response code");
        assertTrue(con.getContentType().equalsIgnoreCase("application/json"), "Content is not JSON-encoded");
        
        InputStream in = con.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        String line;
        StringBuilder responseBuilder = new StringBuilder();
        while((line = reader.readLine()) != null) {
            responseBuilder.append(line);
        }

        JsonArray response = DroneService.GSON.fromJson(responseBuilder.toString(), JsonArray.class);
        assertFalse(response.isEmpty(), "Response was empty, maybe no drones were registered?");

    }

    @Test
    @DisplayName("GET:/drones/<SERIAL> should return the drone registered by previous tests")
    @Order(12)
    public void GETdrones_With_Serial_Should_Return_The_Previously_Registered_Drone() throws Exception {

        URL url = new URL(ENDPOINT_URL + "/drones/" + TEST_DRONE_SERIAL);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");

        assertEquals(200, con.getResponseCode(), "Invalid response code");
        assertTrue(con.getContentType().equalsIgnoreCase("application/json"), "Content is not JSON-encoded");
        
        InputStream in = con.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        String line;
        StringBuilder responseBuilder = new StringBuilder();
        while((line = reader.readLine()) != null) {
            responseBuilder.append(line);
        }

        Drone expectedDrone = new Drone(
                                (String) TEST_PAYLOAD.get("serialNumber"),
                                (String) TEST_PAYLOAD.get("model"),
                                (String) TEST_PAYLOAD.get("state"),
                                (int) TEST_PAYLOAD.get("weightLimit"),
                                (int) TEST_PAYLOAD.get("batteryLevel"));

        JsonObject response = DroneService.GSON.fromJson(responseBuilder.toString(), JsonObject.class);

        Drone retrievedDrone = new Drone(
                                    response.get("serialNumber").getAsString(),
                                    response.get("model").getAsString(),
                                    response.get("state").getAsString(),
                                    response.get("weightLimit").getAsInt(),
                                    response.get("batteryLevel").getAsInt());

        assertEquals(expectedDrone, retrievedDrone, "Drones have different attributes!");

    }

    @Test
    @DisplayName("GET:/drones/<SERIAL>/battery should return the drone registered by previous tests battery level")
    @Order(13)
    public void GETdrones_With_Serial_Should_Return_The_Previously_Registered_Drone_BatteryLevel() throws Exception {

        URL url = new URL(ENDPOINT_URL + "/drones/" + TEST_DRONE_SERIAL + "/battery");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");

        assertEquals(200, con.getResponseCode(), "Invalid response code");
        assertTrue(con.getContentType().equalsIgnoreCase("application/json"), "Content is not JSON-encoded");
        
        InputStream in = con.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        String line;
        StringBuilder responseBuilder = new StringBuilder();
        while((line = reader.readLine()) != null) {
            responseBuilder.append(line);
        }

        JsonObject response = DroneService.GSON.fromJson(responseBuilder.toString(), JsonObject.class);

        assertEquals(TEST_PAYLOAD.get("batteryLevel"), response.get("data").getAsInt(), "Drones have different battery levels! Are they the same?");

    }

    @Test
    @DisplayName("DELETE:/drones/<SERIAL> should fail on non idle state")
    @Order(14)
    public void DELETEdrones_With_Serial_Should_Fail_On_Non_Idle_State() throws Exception {

        URL url = new URL(ENDPOINT_URL + "/drones/" + TEST_DRONE_SERIAL);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("DELETE");

        assertEquals(409, con.getResponseCode(), "Invalid response code");
        assertTrue(con.getContentType().equalsIgnoreCase("application/json"), "Content is not JSON-encoded");
        
    }

    @Test
    @DisplayName("PATCH:/drones/<SERIAL> should update state from LOADED to IDLE")
    @Order(15)
    public void PATCHdrones_With_Serial_Should_Update_State_From_LOADED_To_IDLE() throws Exception {

        URL url = new URL(ENDPOINT_URL + "/drones/" + TEST_DRONE_SERIAL);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        
        /*
         * Declared first as POST request and later overriden
         * by X-HTTP-Method-Override property since {@link HttpURLConnection}
         * does not support "PATCH" natively 
         */
        con.setRequestMethod("POST");
        con.setRequestProperty("X-HTTP-Method-Override", "PATCH");

        Map<String, String> payload = Map.of("state", Drone.State.IDLE.name()); 

        con.setDoOutput(true);
        DataOutputStream out = new DataOutputStream(con.getOutputStream());
        out.write(DroneService.GSON.toJson(payload).getBytes());
        out.flush();
        out.close();

        assertEquals(200, con.getResponseCode(), "Invalid response code");
        assertTrue(con.getContentType().equalsIgnoreCase("application/json"), "Content is not JSON-encoded");
        
        // Checking for updated object

        con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");

        assertEquals(200, con.getResponseCode(), "Invalid response code on update check!");
        assertTrue(con.getContentType().equalsIgnoreCase("application/json"), "Content is not JSON-encoded on update check!");

        InputStream in = con.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        String line;
        StringBuilder responseBuilder = new StringBuilder();
        while((line = reader.readLine()) != null) {
            responseBuilder.append(line);
        }

        JsonObject response = DroneService.GSON.fromJson(responseBuilder.toString(), JsonObject.class);

        assertEquals(Drone.State.IDLE.name(), response.get("state").getAsString(), "State not updated properly!");
        

    }

    @Test
    @DisplayName("DELETE:/drones/<SERIAL> should succeed")
    @Order(16)
    public void DELETEdrones_With_Serial_Should_Suceed() throws Exception {

        URL url = new URL(ENDPOINT_URL + "/drones/" + TEST_DRONE_SERIAL);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("DELETE");

        assertEquals(200, con.getResponseCode(), "Invalid response code");
        assertTrue(con.getContentType().equalsIgnoreCase("application/json"), "Content is not JSON-encoded");
        
    }

    


    
    
    
}
