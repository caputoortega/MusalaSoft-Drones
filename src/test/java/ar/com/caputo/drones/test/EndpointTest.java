package ar.com.caputo.drones.test;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpRequest.Builder;
import java.net.http.HttpResponse.BodyHandler;
import java.nio.file.Files;
import java.nio.file.Path;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;

import ar.com.caputo.drones.DroneService;
import spark.Spark;

public class EndpointTest {

    private static String API;
    private final HttpClient CLIENT = HttpClient.newHttpClient();
    private final BodyHandler<String> RESPONSE_BODY_HANDLER = HttpResponse.BodyHandlers.ofString();

    /**
     * The service's port
     */
    private static int API_PORT;

    /**
     * Get a random port from the system to prevent
     * port collisioning
     * @return a free network port
     * @throws IOException
     */
    private static int getRandomFreePort() throws IOException {
        try (ServerSocket socket = new ServerSocket(0)) {
            return socket.getLocalPort();
        }
    }

    /**
     * Updates the {@link #API_PORT} to a random
     * free port via {@link #getRandomFreePort}
     * @throws Exception
     */
    protected EndpointTest() throws Exception {
        API_PORT = getRandomFreePort();
    }


    /**
     * Sets up a test instance for the service under
     * a random port on {@code 0.0.0.0} with a
     * temporary database "{@code dronesTest}"
     */
    @BeforeAll
    public static void setup() {
        
        Spark.awaitStop();
        DroneService.main(new String[]{"-h:0.0.0.0", "-p:" + API_PORT, "-db:dronesTest"});
        API = "http://localhost:" + API_PORT + DroneService.getInstance().API_URL;

    }

    /**
     * Safely stops Spark and deletes the temporary
     * files generated by {@link #setup()}
     * @throws Exception
     */
    @AfterAll
    public static void teardown() throws Exception {
        Spark.stop();
        Files.deleteIfExists(Path.of(System.getProperty("user.dir") + "/dronesTest.mv.db"));
        Files.deleteIfExists(Path.of(System.getProperty("user.dir") + "/dronesTest.trace.db"));
    }

    /**
     * 
     * @param TARGET
     * @return
     */
    private final Builder requestBuilder(final String TARGET) {
        return HttpRequest.newBuilder().uri(URI.create(API + TARGET));
    }

    /**
     * Build a GET request to the given target
     * @param TARGET
     * @return an {@link HttpRequest} object for {@code GET}
     */
    protected final HttpRequest getRequest(final String TARGET) {
        return requestBuilder(TARGET)
                .GET()
                .setHeader("Accept", "application/json")
                .build();
    }

    /**
     * Build a POST request for the given target
     * with a specific payload
     * @param TARGET
     * @param PAYLOAD
     * @return an {@link HttpRequest} object for {@code POST}
     */
    protected final HttpRequest postRequest(final String TARGET, final Object PAYLOAD) {
        
        return requestBuilder(TARGET)
                .POST(HttpRequest.BodyPublishers.ofString(DroneService.GSON.toJson(PAYLOAD)))
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .build();
    
    }

    /**
     * Build a DELETE request to the given target
     * @param TARGET
     * @return an {@link HttpRequest} object for {@code DELETE}
     */
    protected final HttpRequest deleteRequest(final String TARGET) {

        return requestBuilder(TARGET)
                .DELETE()
                .header("Accept", "application/json")
                .build();
    } 

    /**
     * Build a patch request for the given target
     * with a specific payload
     * @param TARGET
     * @param PAYLOAD
     * @return an {@link HttpRequest} object for {@code PATCH}
     */
    protected final HttpRequest patchRequest(final String TARGET, final Object PAYLOAD) {

        return requestBuilder(TARGET)
                .method("PATCH", HttpRequest.BodyPublishers.ofString(DroneService.GSON.toJson(PAYLOAD)))
                .setHeader("Content-Type", "application/json")
                .setHeader("Accept", "application/json")
                .build();

    }

    /**
     * Send a request to the API
     * @param req
     * @return the server response for the given request
     * @throws Exception
     */
    protected final HttpResponse<String> client(HttpRequest req) throws Exception {
        
        return CLIENT.send(req, RESPONSE_BODY_HANDLER);

    }
    
    /**
     * Checks whether the Content-Type header from the given
     * response is {@code application/json} or not
     * @param response
     * @return whether the response is correctly encoded or not
     */
    protected final boolean isValidContentType(HttpResponse<?> response) {
        return response.headers().firstValue("Content-Type").get().equalsIgnoreCase("application/json");
    }
}
